formula = x,
iter = iter,
thin = 1,
data = dat,
family = lognormal(),
silent = 2,
chains = chains,
cores = chains,
prior = priors
)
mod <- add_criterion(mod, c("loo"))
return(mod)
})
priors <- c(prior(lognormal(6), class = "b"))
# Run loops with models
brms_models <- lapply(model_formulas, function(x){
mod <- brm(
formula = x,
iter = iter,
thin = 1,
data = dat,
family = lognormal(),
silent = 2,
chains = chains,
cores = chains,
prior = priors
)
mod <- add_criterion(mod, c("loo"))
return(mod)
})
priors <- c(set_prior("student_t(10,0,1)", class = "sigma"),
set_prior("student_t(10,0,1)", class = "sd"))
# Run loops with models
brms_models <- lapply(model_formulas, function(x){
mod <- brm(
formula = x,
iter = iter,
thin = 1,
data = dat,
family = lognormal(),
silent = 2,
chains = chains,
cores = chains,
prior = priors
)
mod <- add_criterion(mod, c("loo"))
return(mod)
})
model_formulas <- c("time_to_enter ~ sensory_input + (1 | individual)", "time_to_enter ~ 1 + (1 | individual)")
iter <- 5000
chains <- 4
priors <- c(set_prior("student_t(10,0,1)", class = "sigma"),
set_prior("student_t(10,0,1)", class = "sd"))
# Run loops with models
brms_models <- lapply(model_formulas, function(x){
mod <- brm(
formula = x,
iter = iter,
thin = 1,
data = dat,
family = lognormal(),
silent = 2,
chains = chains,
cores = chains,
prior = priors
)
mod <- add_criterion(mod, c("loo"), moment_match = TRUE)
return(mod)
})
model_formulas <- c("time_to_enter ~ sensory_input + (1 | individual)", "time_to_enter ~ 1 + (1 | individual)")
iter <- 5000
chains <- 4
priors <- c(set_prior("student_t(10,0,1)", class = "sigma"),
set_prior("student_t(10,0,1)", class = "sd"))
# Run loops with models
brms_models <- lapply(model_formulas, function(x){
mod <- brm(
formula = x,
iter = iter,
thin = 1,
data = dat,
family = lognormal(),
silent = 2,
chains = chains,
cores = chains,
prior = priors
)
mod <- add_criterion(mod, c("loo"), save_pars(all = TRUE))
return(mod)
})
model_formulas <- c("time_to_enter ~ sensory_input + (1 | individual)", "time_to_enter ~ 1 + (1 | individual)")
iter <- 5000
chains <- 4
priors <- c(set_prior("student_t(10,0,1)", class = "sigma"),
set_prior("student_t(10,0,1)", class = "sd"))
# Run loops with models
brms_models <- lapply(model_formulas, function(x){
mod <- brm(
formula = x,
iter = iter,
thin = 1,
data = dat,
family = lognormal(),
silent = 2,
chains = chains,
cores = chains,
prior = priors
)
mod <- add_criterion(mod, c("loo"), save_pars = save_pars(all = TRUE))
return(mod)
})
names(brms_models) <- model_formulas
saveRDS(brms_models, "./data/processed/regresion_models_brms.RDS")
model_formulas <- c("time_to_enter ~ sensory_input + (1 | individual)", "time_to_enter ~ 1 + (1 | individual)")
iter <- 5000
chains <- 4
priors <- c(set_prior("student_t(10,0,1)", class = "sigma"),
set_prior("student_t(10,0,1)", class = "sd"))
# Run loops with models
brms_models <- lapply(model_formulas, function(x){
mod <- brm(
formula = x,
iter = iter,
thin = 1,
data = dat[dat$time_to_enter < 300, ],
family = lognormal(),
silent = 2,
chains = chains,
cores = chains,
prior = priors
)
mod <- add_criterion(mod, c("loo"), save_pars = save_pars(all = TRUE))
return(mod)
})
names(brms_models) <- model_formulas
saveRDS(brms_models, "./data/processed/regression_models_brms_subset.RDS")
model_formulas <- c("time_to_enter ~ sensory_input + (1 | individual)", "time_to_enter ~ 1 + (1 | individual)")
iter <- 5000
chains <- 4
priors <- c(set_prior("student_t(10,0,1)", class = "sigma"),
set_prior("student_t(10,0,1)", class = "sd"))
# Run loops with models
brms_models <- lapply(model_formulas, function(x){
mod <- brm(
formula = x,
iter = iter,
thin = 1,
data = dat[dat$time_to_enter < 300, ],
family = lognormal(),
silent = 2,
chains = chains,
cores = chains,
prior = priors,
control=list(adapt_delta=0.99, max_treedepth=15)
)
mod <- add_criterion(mod, c("loo"), save_pars = save_pars(all = TRUE))
return(mod)
})
names(brms_models) <- model_formulas
saveRDS(brms_models, "./data/processed/regression_models_brms_subset.RDS")
x <- c("readxl", "brms", "viridis", "ggplot2", "pbapply", "grid", "gridExtra",  "kableExtra", "posterior", "purrr"
)
aa <- lapply(x, function(y) {
if(!y %in% installed.packages()[,"Package"])  install.packages(y)
try(require(y, character.only = T), silent = T)
})
source("~/Dropbox/R_package_testing/brmsish/R/brms_model_summary.R")
source("~/Dropbox/R_package_testing/brmsish/R/contrasts.R")
source("~/Dropbox/R_package_testing/brmsish/R/model_summary.R")
source("~/Dropbox/R_package_testing/brmsish/R/contrasts.R")
# contrasts
cntr <- contrasts(model = brms_models[[rownames(comp_mods)[1]]], predictor = "sensory_input", n.posterior = 2000, level.sep = " VS ", fill = "#35B779FF", gsub.pattern = c("Lesseninput", "Soundvision", "Noisecontrol"), gsub.replacement = c("Lessen input", "Sound & vision", "Noise control"))
model = brms_models[[rownames(comp_mods)[1]]]
predictor = "sensory_input"
n.posterior = 2000
level.sep = " VS "
fill = "#35B779FF"
gsub.pattern = c("Lesseninput", "Soundvision", "Noisecontrol")
gsub.replacement = c("Lessen input", "Sound & vision", "Noise control")
sort.levels = NULL
html.table =
T
plot = T
# object for avoiding errors with ggplot functions when checking package
significance <-
value <-
variable <-
CI_high <-
CI_low <-
Hypothesis <- Parameter <- chain <- iteration <- NULL
fit <- model$fit
betas <- grep("^b_", names(fit@sim$samples[[1]]), value = TRUE)
model_levels <- gsub("^b_", "", betas)
model_levels <- grep(paste0("^Intercept$|", predictor), model_levels, value = TRUE)
# fix  baseline level
original_levels <-
gsub(" ", "", paste0(predictor, unique(model$data[, predictor])))
base_level <- setdiff(original_levels, model_levels)
# get levels
pred_levels <- as.character(unique(model$data[, predictor]))
# sort
if (!is.null(sort.levels))
pred_levels <- pred_levels[match(sort.levels, pred_levels)]
# add predictor name
pred_levels <- paste0(predictor, pred_levels)
# create data frame with level pairs
levels_df <- as.data.frame(t(utils::combn(pred_levels, 2)))
contrsts <- paste(apply(levels_df, 1, paste, collapse = " - "), "= 0")
# convert magnitude for those compare against baseline
levels_df$sign <- 1
levels_df$sign[grep(base_level, levels_df$V1)] <- -1
names(contrsts) <- paste0(levels_df$V1, level.sep, levels_df$V2)
contrsts <- gsub(paste0(base_level, level.sep), "", contrsts)
contrsts <- gsub(paste0(level.sep, base_level), "", contrsts)
names(contrsts) <- gsub(predictor, "", names(contrsts))
levels_df$hypothesis <- names(contrsts)
if (!is.null(gsub.pattern) & !is.null(gsub.replacement)) {
if (length(gsub.pattern) != length(gsub.replacement))
stop2("'gsub.replacement' and 'gsub.pattern' must have the same length")
for (i in 1:length(gsub.pattern))
names(contrsts) <-
gsub(gsub.pattern[i], gsub.replacement[i], names(contrsts))
}
# evaluate hypothesis
hyps <- brms::hypothesis(model, contrsts)
contrsts
base_level
betas
# evaluate hypothesis
hyps <- brms::hypothesis(model, contrsts[1])
contrsts
betas
# evaluate hypothesis
hyps <- brms::hypothesis(model, contrsts[2])
# evaluate hypothesis
hyps <- brms::hypothesis(model, contrsts[3])
# evaluate hypothesis
hyps <- brms::hypothesis(model, contrsts[4])
# evaluate hypothesis
hyps <- brms::hypothesis(model, contrsts[5])
contrsts[5]
betas
contrsts <- paste(apply(levels_df, 1, paste, collapse = " - "), "= 0")
contrsts
levels_df
levels_df$V1 <- gsub(" |&", "", levels_df$V1)
source("~/Dropbox/R_package_testing/brmsish/R/contrasts.R")
# contrasts
cntr <- contrasts(model = brms_models[[rownames(comp_mods)[1]]], predictor = "sensory_input", n.posterior = 2000, level.sep = " VS ", fill = "#35B779FF", gsub.pattern = c("Lesseninput", "Soundvision", "Noisecontrol"), gsub.replacement = c("Lessen input", "Sound & vision", "Noise control"))
contrsts
# create data frame with level pairs
levels_df <- as.data.frame(t(utils::combn(pred_levels, 2)))
# remove spaces and &
levels_df$V1 <- gsub(" |&", "", levels_df$V1)
levels_df$V2 <- gsub(" |&", "", levels_df$V2)
# create contrasts in brms syntax
contrsts <- paste(apply(levels_df, 1, paste, collapse = " - "), "= 0")
contrsts
# convert magnitude for those compare against baseline
levels_df$sign <- 1
levels_df$sign[grep(base_level, levels_df$V1)] <- -1
base_level
original_levels
fit <- model$fit
betas <- grep("^b_", names(fit@sim$samples[[1]]), value = TRUE)
betas
model_levels <- gsub("^b_", "", betas)
model_levels <- grep(paste0("^Intercept$|", predictor), model_levels, value = TRUE)
model_levels
# fix  baseline level
original_levels <-
gsub(" ", "", paste0(predictor, unique(model$data[, predictor])))
base_level <- setdiff(original_levels, model_levels)
# fix  baseline level
original_levels <-
gsub(" |&", "", paste0(predictor, unique(model$data[, predictor])))
base_level <- setdiff(original_levels, model_levels)
# get levels
pred_levels <- as.character(unique(model$data[, predictor]))
# sort
if (!is.null(sort.levels))
pred_levels <- pred_levels[match(sort.levels, pred_levels)]
# add predictor name
pred_levels <- paste0(predictor, pred_levels)
# create data frame with level pairs
levels_df <- as.data.frame(t(utils::combn(pred_levels, 2)))
# remove spaces and &
levels_df$V1 <- gsub(" |&", "", levels_df$V1)
levels_df$V2 <- gsub(" |&", "", levels_df$V2)
# create contrasts in brms syntax
contrsts <- paste(apply(levels_df, 1, paste, collapse = " - "), "= 0")
# convert magnitude for those compare against baseline
levels_df$sign <- 1
levels_df$sign[grep(base_level, levels_df$V1)] <- -1
names(contrsts) <- paste0(levels_df$V1, level.sep, levels_df$V2)
contrsts <- gsub(paste0(base_level, level.sep), "", contrsts)
contrsts <- gsub(paste0(level.sep, base_level), "", contrsts)
names(contrsts) <- gsub(predictor, "", names(contrsts))
levels_df$hypothesis <- names(contrsts)
contrsts
# create contrasts in brms syntax
contrsts <- paste(apply(levels_df, 1, paste, collapse = " - "), "= 0")
# convert magnitude for those compare against baseline
levels_df$sign <- 1
levels_df$sign[grep(base_level, levels_df$V1)] <- -1
names(contrsts) <- paste0(levels_df$V1, level.sep, levels_df$V2)
contrsts <- gsub(paste0(base_level, level.sep), "", contrsts)
contrsts <- gsub(paste0(level.sep, base_level), "", contrsts)
names(contrsts) <- gsub(predictor, "", names(contrsts))
contrsts
# create contrasts in brms syntax
contrsts <- paste(apply(levels_df, 1, paste, collapse = " - "), "= 0")
# convert magnitude for those compare against baseline
levels_df$sign <- 1
levels_df$sign[grep(base_level, levels_df$V1)] <- -1
names(contrsts) <- paste0(levels_df$V1, level.sep, levels_df$V2)
names(contrsts)
# create data frame with level pairs
levels_df <- as.data.frame(t(utils::combn(pred_levels, 2)))
# remove spaces and &
levels_df$V1.nospace <- gsub(" |&", "", levels_df$V1)
levels_df$V1.nospace <- gsub(" |&", "", levels_df$V2)
# create contrasts in brms syntax
contrsts <- paste(apply(levels_df, 1, paste, collapse = " - "), "= 0")
# convert magnitude for those compare against baseline
levels_df$sign <- 1
levels_df$sign[grep(base_level, levels_df$V1)] <- -1
names(contrsts) <- paste0(levels_df$V1, level.sep, levels_df$V2)
paste0(base_level, level.sep)
contrsts
# create data frame with level pairs
levels_df <- as.data.frame(t(utils::combn(pred_levels, 2)))
# remove spaces and &
levels_df$V1.nospace <- gsub(" |&", "", levels_df$V1)
levels_df$V1.nospace <- gsub(" |&", "", levels_df$V2)
# create contrasts in brms syntax
contrsts <- paste(apply(levels_df, 1, paste, collapse = " - "), "= 0")
contrsts
# create contrasts in brms syntax
contrsts <- paste(apply(levels_df[, c("V1", "V2")], 1, paste, collapse = " - "), "= 0")
contrsts
# convert magnitude for those compare against baseline
levels_df$sign <- 1
# create contrasts in brms syntax
contrsts <- paste(apply(levels_df[, c("V1.nospace", "V2.nospace")], 1, paste, collapse = " - "), "= 0")
# remove spaces and &
levels_df$V1.nospace <- gsub(" |&", "", levels_df$V1)
levels_df$V2.nospace <- gsub(" |&", "", levels_df$V2)
# create contrasts in brms syntax
contrsts <- paste(apply(levels_df[, c("V1.nospace", "V2.nospace")], 1, paste, collapse = " - "), "= 0")
contrsts
# convert magnitude for those compare against baseline
levels_df$sign <- 1
levels_df$sign[grep(base_level, levels_df$V1)] <- -1
names(contrsts) <- paste0(levels_df$V1, level.sep, levels_df$V2)
paste0(base_level, level.sep)
level.sep
# create contrasts in brms syntax
contrsts <- paste(apply(levels_df[, c("V1.nospace", "V2.nospace")], 1, paste, collapse = level.sep), "= 0")
# convert magnitude for those compare against baseline
levels_df$sign <- 1
levels_df$sign[grep(base_level, levels_df$V1)] <- -1
names(contrsts) <- paste0(levels_df$V1, level.sep, levels_df$V2)
contrsts <- gsub(paste0(base_level, level.sep), "", contrsts)
contrsts
paste0(base_level, level.sep)
contrsts <- gsub(paste0(base_level, level.sep), "", contrsts)
contrsts
contrsts <- gsub(paste0(level.sep, base_level), "", contrsts)
contrsts
names(contrsts) <- gsub(predictor, "", names(contrsts))
contrsts
levels_df$hypothesis <- names(contrsts)
if (!is.null(gsub.pattern) & !is.null(gsub.replacement)) {
if (length(gsub.pattern) != length(gsub.replacement))
stop2("'gsub.replacement' and 'gsub.pattern' must have the same length")
for (i in 1:length(gsub.pattern))
names(contrsts) <-
gsub(gsub.pattern[i], gsub.replacement[i], names(contrsts))
}
# evaluate hypothesis
hyps <- brms::hypothesis(model, contrsts[5])
hyps
# evaluate hypothesis
hyps <- brms::hypothesis(model, contrsts)
# create contrasts in brms syntax
contrsts <- paste(apply(levels_df[, c("V1.nospace", "V2.nospace")], 1, paste, collapse = " - "), "= 0")
# convert magnitude for those compare against baseline
levels_df$sign <- 1
levels_df$sign[grep(base_level, levels_df$V1)] <- -1
names(contrsts) <- paste0(levels_df$V1, level.sep, levels_df$V2)
contrsts <- gsub(paste0(base_level, " - "), "", contrsts)
contrsts <- gsub(paste0(" - ", base_level), "", contrsts)
names(contrsts) <- gsub(predictor, "", names(contrsts))
levels_df$hypothesis <- names(contrsts)
if (!is.null(gsub.pattern) & !is.null(gsub.replacement)) {
if (length(gsub.pattern) != length(gsub.replacement))
stop2("'gsub.replacement' and 'gsub.pattern' must have the same length")
for (i in 1:length(gsub.pattern))
names(contrsts) <-
gsub(gsub.pattern[i], gsub.replacement[i], names(contrsts))
}
# evaluate hypothesis
hyps <- brms::hypothesis(model, contrsts)
hyps
hyp_table <-
hyps$hypothesis[, c("Hypothesis",
"Estimate",
"Est.Error",
"CI.Lower",
"CI.Upper")]
hyp_table
source("~/Dropbox/R_package_testing/brmsish/R/contrasts.R")
# contrasts
cntr <- contrasts(model = brms_models[[rownames(comp_mods)[1]]], predictor = "sensory_input", n.posterior = 2000, level.sep = " VS ", fill = "#35B779FF", gsub.pattern = c("Lesseninput", "Soundvision", "Noisecontrol"), gsub.replacement = c("Lessen input", "Sound & vision", "Noise control"))
cntr
# get levels
pred_levels <- as.character(unique(model$data[, predictor]))
pred_levels
# contrasts
contrasts(model = brms_models[[rownames(comp_mods)[1]]], predictor = "sensory_input", n.posterior = 2000, level.sep = " VS ", fill = "#35B779FF", gsub.pattern = c("Lesseninput", "Soundvision", "Noisecontrol"), gsub.replacement = c("Lessen input", "Sound & vision", "Noise control"), html.table = TRUE, plot = TRUE, sort.levels = c("Lessen input", "Sound & vision", "Vision", "Sound", "Noise control"))
# Chunk 1: packages
x <- c("readxl", "brms", "viridis", "ggplot2", "pbapply", "cowplot", "kableExtra")
aa <- lapply(x, function(y) {
if(!y %in% installed.packages()[,"Package"])  install.packages(y)
try(require(y, character.only = T), silent = T)
})
# Chunk 2: options and functions
knitr::opts_knit$set(root.dir = normalizePath(".."))
knitr::opts_chunk$set(dpi = 80, fig.width = 12, fig.height = 8, eval = FALSE, warning = FALSE, message = FALSE)
theme_set(theme_classic(base_size = 24))
source("~/Dropbox/R_package_testing/brmsish/R/contrasts.R")
source("~/Dropbox/R_package_testing/brmsish/R/html_summary.R")
# Chunk 4
dat <- read.csv("./data/raw/time_entering_roost_thyroptera.csv")
dat$sensory_input <- factor(dat$sensory_input, levels = c("Sound & vision", "Noise control", "Sound", "Vision", "Lessen input"))
# Chunk 5
# Dates
table(dat$date)
# Chunk 6
table(dat$individual)
# Chunk 7
table(table(dat$individual))
# Chunk 8
table(dat$individual[!duplicated(paste(dat$sensory_input, dat$individual))])
# Chunk 9
table(table(dat$individual[!duplicated(paste(dat$sensory_input, dat$individual))]))
# Chunk 10
table(dat$sensory_input, dat$time_of_the_day)
# Chunk 11
table(dat$sensory_input[!duplicated(paste(dat$sensory_input, dat$individual))], dat$time_of_the_day[!duplicated(paste(dat$sensory_input, dat$individual))])
# Chunk 12: exclude individuals with 1 experiment
# exclude individuals with 1 experiment
tab <- table(dat$individual[!duplicated(paste(dat$sensory_input, dat$individual))])
dat <- dat[!dat$individual %in%  names(tab)[tab == 1], ]
# Chunk 13
cols <- viridis(10)
agg_dat <- aggregate(time_to_enter ~ sensory_input, dat, mean)
agg_dat$sd <- aggregate(time_to_enter ~ sensory_input, dat, sd)[, 2]
agg_dat$n <- aggregate(time_to_enter ~ sensory_input, dat, length)[, 2]
agg_dat$labels <- c("a", "a", "a", "a", "b")
agg_dat$n.labels <- paste("n =", agg_dat$n)
agg_dat$sensory_input <- factor(agg_dat$sensory_input)
# raincoud plot:
ggplot(dat, aes(y = time_to_enter, x = sensory_input)) +
## add half-violin from {ggdist} package
ggdist::stat_halfeye(
fill = cols[7],
alpha = 0.5,
## custom bandwidth
adjust = .5,
## adjust height
width = .6,
.width = 0,
## move geom to the cright
justification = -.2,
point_colour = NA
) +
geom_boxplot(fill = adjustcolor(cols[7], 0.5),
width = .15,
## remove outliers
outlier.shape = NA ## `outlier.shape = NA` works as well
) +
## add justified jitter from the {gghalves} package
gghalves::geom_half_point(
color = cols[5],
## draw jitter on the left
side = "l",
## control range of jitter
range_scale = .4,
## add some transparency
alpha = .5,
) +
labs(x=" ", y="Average Nearest Neighbor Distance (mm)"
) +
ylim(c(-30, 310)) +
geom_text(data = agg_dat, aes(y = rep(-25, 5), x = sensory_input, label = n.labels), nudge_x = -0.13, size = 6) +
scale_x_discrete(labels=c("Control" = "Noise control", "Sound vision" = "Sound & vision", "Vision" = "Vision", "Lessen input" = "Lessen input")) +
labs(x = "Sensory input       ", y = "Time to enter roost (s)") + theme(axis.text.x = element_text(angle = 15, hjust = 1))
# Chunk 15: print brms results
brms_models <- readRDS("./data/processed/regresion_models_brms.RDS")
comp_mods <- loo_compare(brms_models[[1]], brms_models[[2]], model_names = names(brms_models))
df1 <- kbl(comp_mods, row.names = TRUE, escape = FALSE, format = "html", digits = 3)
cat("Compare models:")
kable_styling(df1, bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = FALSE, font_size = 12)
cat("Best model:\n")
cat(paste("-  ", rownames(comp_mods)[1], "\n"))
# best model
if (!grepl("1 +", rownames(comp_mods)[1], fixed = TRUE))
html_summary(model = brms_models[[rownames(comp_mods)[1]]], gsub.pattern = "sensory_input", gsub.replacement = "", fill = "#35B779FF")
# contrasts
contrasts(model = brms_models[[rownames(comp_mods)[1]]], predictor = "sensory_input", n.posterior = 2000, level.sep = " VS ", fill = "#35B779FF", gsub.pattern = c("Lesseninput", "Soundvision", "Noisecontrol"), gsub.replacement = c("Lessen input", "Sound & vision", "Noise control"), html.table = TRUE, plot = TRUE,  sort.levels = c("Lessen input","Vision", "Sound", "Sound & vision", "Noise control"))
