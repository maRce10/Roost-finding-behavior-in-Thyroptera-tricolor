model_formulas <- c("time_to_enter ~ sensory_input_categ", "time_to_enter ~ 1")
itrns <- 10000
# Run loops with models
replic_models_categorical <- pblapply(model_formulas, function(x){
# set priors
prior <- list(R = list(V = 1, nu = 0.002, fix=1), G = list(G1 = list(V = 1, nu = 0.002)))
# replicate each one 3 times
models <- replicate(3, MCMCglmm(fixed = as.formula(x), random = ~ individual, data = dat, verbose = FALSE, nitt = itrns, start = list(QUASI = FALSE, family = "gaussian"), prior = prior, thin = 250, burnin = 10000), simplify = FALSE)
return(models)
})
names(replic_models_categorical) <- model_formulas
models_categorial <- model.sel(lapply(replic_models_categorical, "[[", 1), rank="DIC")
models_categorial
model_formulas <- c("time_to_enter ~ sensory_input_categ", "time_to_enter ~ 1")
itrns <- 10000
# Run loops with models
replic_models_categorical <- pblapply(model_formulas, function(x){
# set priors
prior <- list(R = list(V = 1, nu = 0.002, fix=1), G = list(G1 = list(V = 1, nu = 0.002)))
# replicate each one 3 times
models <- replicate(3, MCMCglmm(fixed = as.formula(x), random = ~ individual, data = dat, verbose = FALSE, nitt = itrns, start = list(QUASI = FALSE, family = "gaussian"), prior = prior, thin = 250, burnin = 10000), simplify = FALSE)
return(models)
})
model_formulas <- c("time_to_enter ~ sensory_input_categ", "time_to_enter ~ 1")
itrns <- 100000
# Run loops with models
replic_models_categorical <- pblapply(model_formulas, function(x){
# set priors
prior <- list(R = list(V = 1, nu = 0.002, fix=1), G = list(G1 = list(V = 1, nu = 0.002)))
# replicate each one 3 times
models <- replicate(3, MCMCglmm(fixed = as.formula(x), random = ~ individual, data = dat, verbose = FALSE, nitt = itrns, start = list(QUASI = FALSE, family = "gaussian"), prior = prior, thin = 250, burnin = 10000), simplify = FALSE)
return(models)
})
names(replic_models_categorical) <- model_formulas
models_categorial <- model.sel(lapply(replic_models_categorical, "[[", 1), rank="DIC")
models_categorial
saveRDS(replic_models_categorical, "./output/replic_models_categorical.RDS")
dat <- as.data.frame(read_excel("./data/raw/time_entering_roost_thyroptera.xlsx"))
ggplot(dat, aes(x = time_to_enter)) + geom_histogram()
dat$sensory_input_categ <- as.factor(paste(dat$treatment, dat$time_of_the_day, sep = "-"))
levels(dat$sensory_input_categ) <- list("Control" = "control-day", "Sound & vision" = "white-noise_no_masking-day", "Sound" =  "white-noise_no_masking-night", "Vision" = "echolocation_masked-day", "Lessen input" = "echolocation_masked-night")
model_formulas <- c("time_to_enter ~ sensory_input_categ", "time_to_enter ~ 1")
itrns <- 100000
# Run loops with models
replic_models_categorical <- pblapply(model_formulas, function(x){
# set priors
prior <- list(R = list(V = 1, nu = 0.002, fix=1), G = list(G1 = list(V = 1, nu = 0.002)))
# replicate each one 3 times
models <- replicate(3, MCMCglmm(fixed = as.formula(x), random = ~ individual, data = dat, verbose = FALSE, nitt = itrns, start = list(QUASI = FALSE, family = "gaussian"), prior = prior, thin = 250, burnin = 10000), simplify = FALSE)
return(models)
})
names(replic_models_categorical) <- model_formulas
models_categorial <- model.sel(lapply(replic_models_categorical, "[[", 1), rank="DIC")
models_categorial
saveRDS(replic_models_categorical, "./output/replic_models_categorical.RDS")
models_categorial <- model.sel(lapply(replic_models_categorical, "[[", 1), rank="DIC")
models_categorial[, !colnames(models_categorial) %in% "family"]
summary(replic_models_categorical$`time_to_enter ~ sensory_input_categ`[[1]])
model_formulas
dat$sensory_input_categ
dat <- as.data.frame(read_excel("./data/raw/time_entering_roost_thyroptera.xlsx"))
dat$sensory_input_categ <- as.factor(paste(dat$treatment, dat$time_of_the_day, sep = "-"))
agg_dat <- aggregate(time_to_enter ~ sensory_input_categ, data = dat, mean)
agg_dat$sd  <- aggregate(time_to_enter ~ sensory_input_categ, data = dat, sd)[, 2]
ggplot(agg_dat, aes(x = sensory_input_categ, y = time_to_enter)) +
geom_pointrange(aes(ymin = time_to_enter - sd, ymax = time_to_enter + sd), color = viridis(10, alpha = 1)[8], size = 1.3) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) + labs(x = "Sensory input", y = "Time to enter roost (s)")
dat <- as.data.frame(read_excel("./data/raw/time_entering_roost_thyroptera.xlsx"))
ggplot(dat, aes(x = time_to_enter)) + geom_histogram()
dat$sensory_input_categ <- as.factor(paste(dat$treatment, dat$time_of_the_day, sep = "-"))
levels(dat$sensory_input_categ) <- list("Control" = "control-day", "Sound & vision" = "white-noise_no_masking-day", "Sound" =  "white-noise_no_masking-night", "Vision" = "echolocation_masked-day", "Lessen input" = "echolocation_masked-night")
agg_dat <- aggregate(time_to_enter ~ sensory_input_categ, data = dat, mean)
agg_dat$sd  <- aggregate(time_to_enter ~ sensory_input_categ, data = dat, sd)[, 2]
ggplot(agg_dat, aes(x = sensory_input_categ, y = time_to_enter)) +
geom_pointrange(aes(ymin = time_to_enter - sd, ymax = time_to_enter + sd), color = viridis(10, alpha = 1)[8], size = 1.3) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) + labs(x = "Sensory input", y = "Time to enter roost (s)")
x <- model_formulas[1]
# Run loops with models
replic_models_categorical <- pblapply(model_formulas, function(x){
# set priors
prior <- list(R = list(V = 1, nu = 0.002, fix=1), G = list(G1 = list(V = 1, nu = 0.002)))
# replicate each one 3 times
models <- replicate(3, MCMCglmm(fixed = as.formula(x), random = ~ individual, data = dat, verbose = FALSE, nitt = itrns, start = list(QUASI = FALSE, family = "gaussian"), prior = prior, thin = 250, burnin = 10000), simplify = FALSE)
return(models)
})
summary(replic_models_categorical$`time_to_enter ~ sensory_input_categ`[[1]])
replic_models_categorical
names(replic_models_categorical) <- model_formulas
summary(replic_models_categorical$`time_to_enter ~ sensory_input_categ`[[1]])
replic_models_categorical$`time_to_enter ~ sensory_input_categ`[[1]]
model_formulas
str(dat)
agg_dat <- aggregate(time_to_enter ~ sensory_input_categ, data = dat, mean)
agg_dat$sd  <- aggregate(time_to_enter ~ sensory_input_categ, data = dat, sd)[, 2]
ggplot(agg_dat, aes(x = sensory_input_categ, y = time_to_enter)) +
geom_pointrange(aes(ymin = time_to_enter - sd, ymax = time_to_enter + sd), color = viridis(10, alpha = 1)[8], size = 1.3) +
theme(axis.text.x = element_text(angle = 45, vjust = 1, hjust = 1)) + labs(x = "Sensory input", y = "Time to enter roost (s)")
summary(replic_models_categorical$`time_to_enter ~ sensory_input_categ`[[1]])
model_formulas <- c("time_to_enter ~ sensory_input_categ + order", "time_to_enter ~ 1")
itrns <- 100000
# Run loops with models
replic_models_categorical <- pblapply(model_formulas, function(x){
# set priors
prior <- list(R = list(V = 1, nu = 0.002, fix=1), G = list(G1 = list(V = 1, nu = 0.002)))
# replicate each one 3 times
models <- replicate(3, MCMCglmm(fixed = as.formula(x), random = ~ individual, data = dat, verbose = FALSE, nitt = itrns, start = list(QUASI = FALSE, family = "gaussian"), prior = prior, thin = 250, burnin = 10000), simplify = FALSE)
return(models)
})
names(replic_models_categorical) <- model_formulas
models_categorial <- model.sel(lapply(replic_models_categorical, "[[", 1), rank="DIC")
models_categorial
summary(replic_models_categorical$`time_to_enter ~ sensory_input_categ`[[1]])
model_formulas <- c("time_to_enter ~ sensory_input_categ + order", "time_to_enter ~ 1")
itrns <- 70000
# Run loops with models
replic_models_categorical <- pblapply(model_formulas, function(x){
# set priors
prior <- list(R = list(V = 1, nu = 0.002, fix=1), G = list(G1 = list(V = 1, nu = 0.002)))
# replicate each one 3 times
models <- replicate(3, MCMCglmm(fixed = as.formula(x), random = ~ individual, data = dat, verbose = FALSE, nitt = itrns, start = list(QUASI = FALSE, family = "gaussian"), prior = prior, thin = 250, burnin = 1000), simplify = FALSE)
return(models)
})
names(replic_models_categorical) <- model_formulas
models_categorial <- model.sel(lapply(replic_models_categorical, "[[", 1), rank="DIC")
models_categorial
summary(replic_models_categorical$`time_to_enter ~ sensory_input_categ`[[1]])
model_formulas <- c("time_to_enter ~ sensory_input_categ + order", "time_to_enter ~ 1")
itrns <- 10000
# Run loops with models
replic_models_categorical <- pblapply(model_formulas, function(x){
# set priors
prior <- list(R = list(V = 1, nu = 0.002, fix=1), G = list(G1 = list(V = 1, nu = 0.002)))
# replicate each one 3 times
models <- replicate(3, MCMCglmm(fixed = as.formula(x), random = ~ individual, data = dat, verbose = FALSE, nitt = itrns, start = list(QUASI = FALSE), family = "gaussian", prior = prior, thin = 250, burnin = 1000), simplify = FALSE)
return(models)
})
names(replic_models_categorical) <- model_formulas
models_categorial <- model.sel(lapply(replic_models_categorical, "[[", 1), rank="DIC")
models_categorial
summary(replic_models_categorical$`time_to_enter ~ sensory_input_categ`[[1]])
model_formulas <- c("time_to_enter ~ sensory_input_categ", "time_to_enter ~ 1")
itrns <- 100000
# Run loops with models
replic_models_categorical <- pblapply(model_formulas, function(x){
# set priors
prior <- list(R = list(V = 1, nu = 0.002, fix=1), G = list(G1 = list(V = 1, nu = 0.002)))
# replicate each one 3 times
models <- replicate(3, MCMCglmm(fixed = as.formula(x), random = ~ individual, data = dat, verbose = FALSE, nitt = itrns, start = list(QUASI = FALSE), family = "gaussian", prior = prior, thin = 250, burnin = 10000), simplify = FALSE)
return(models)
})
names(replic_models_categorical) <- model_formulas
models_categorial <- model.sel(lapply(replic_models_categorical, "[[", 1), rank="DIC")
models_categorial
dat <- as.data.frame(read_excel("./data/raw/time_entering_roost_thyroptera.xlsx"))
ggplot(dat, aes(x = time_to_enter)) + geom_histogram()
dat$sensory_input_categ
as.factor(paste(dat$treatment, dat$time_of_the_day, sep = "-"))
dat$sensory_input_categ <- as.factor(paste(dat$treatment, dat$time_of_the_day, sep = "-"))
levels(dat$sensory_input_categ) <- list("Control" = "control-day", "Sound & vision" = "white-noise_no_masking-day", "Sound" =  "white-noise_no_masking-night", "Vision" = "echolocation_masked-day", "Lessen input" = "echolocation_masked-night")
itrns <- 100000
m1 <- MCMCglmm("time_to_enter ~ sensory_input_categ", random = ~ individual, data = dat, verbose = FALSE, nitt = itrns, start = list(QUASI = FALSE), family = "gaussian", prior = prior, thin = 250, burnin = 10000)
m1 <- MCMCglmm(time_to_enter ~ sensory_input_categ, random = ~ individual, data = dat, verbose = FALSE, nitt = itrns, start = list(QUASI = FALSE), family = "gaussian", prior = prior, thin = 250, burnin = 10000)
m1 <- MCMCglmm(time_to_enter ~ sensory_input_categ, random = ~ individual, data = dat, verbose = FALSE, nitt = itrns, start = list(QUASI = FALSE), family = "gaussian", thin = 250, burnin = 10000)
summary(m1)
model_formulas <- c("time_to_enter ~ sensory_input_categ", "time_to_enter ~ 1")
itrns <- 100000
# Run loops with models
replic_models_categorical <- pblapply(model_formulas, function(x){
# replicate each one 3 times
models <- replicate(3, MCMCglmm(fixed = as.formula(x), random = ~ individual, data = dat, verbose = FALSE, nitt = itrns, start = list(QUASI = FALSE), family = "gaussian", thin = 250, burnin = 10000), simplify = FALSE)
return(models)
})
names(replic_models_categorical) <- model_formulas
models_categorial <- model.sel(lapply(replic_models_categorical, "[[", 1), rank="DIC")
models_categorial
summary(replic_models_categorical$`time_to_enter ~ sensory_input_categ`[[1]])
# create a variable with treatment as the sum of sensory inputs involved
dat$sensory_input_sum <- 2
dat$sensory_input_sum[dat$sensory_input_categ %in% c("Sound", "Vision")] <- 1
dat$sensory_input_sum[dat$sensory_input_categ == "Lessen input"] <- 0
# create a variable with treatment binary input
dat$sensory_input_binary <- 1
dat$sensory_input_binary[dat$sensory_input_categ == "Lessen input"] <- 0
model_formulas <- c("time_to_enter ~ sensory_input_sum", "time_to_enter ~ sensory_input_binary", "time_to_enter ~ 1")
itrns <- 100000
# Run loops with models
replic_models_ordinal <- pblapply(model_formulas, function(x){
# replicate each one 3 times
models <- replicate(3, MCMCglmm(fixed = as.formula(x), random = ~ individual, data = dat, verbose = FALSE, nitt = itrns, start = list(QUASI = FALSE, family = if (grepl("categ", x)) "gaussian", "ordinal"), thin = 250, burnin = 10000), simplify = FALSE)
return(models)
})
names(replic_models_ordinal) <- model_formulas
models_ordinal <- model.sel(lapply(replic_models_ordinal, "[[", 1), rank="DIC")
models_ordinal
saveRDS(replic_models_categorical, "./output/replic_models_categorical.RDS")
saveRDS(replic_models_ordinal, "./output/replic_models_ordinal.RDS")
packrat::disable()
packrat::on()
packrat::snapshot()
dat <- as.data.frame(read_excel("./data/raw/time_entering_roost_thyroptera.xlsx"))
dat$sensory_input_categ <- as.factor(paste(dat$treatment, dat$time_of_the_day, sep = "-"))
levels(dat$sensory_input_categ) <- list("Control" = "control-day", "Sound & vision" = "white-noise_no_masking-day", "Sound" =  "white-noise_no_masking-night", "Vision" = "echolocation_masked-day", "Lessen input" = "echolocation_masked-night")
dat <- as.data.frame(read_excel("./data/raw/time_entering_roost_thyroptera.xlsx"))
x <- c("readxl", "MCMCglmm", "viridis", "ggplot2", "pbapply", "MuMIn", "grid", "gridExtra")
aa <- lapply(x, function(y) {
if(!y %in% installed.packages()[,"Package"])  install.packages(y)
try(require(y, character.only = T), silent = T)
})
dat <- as.data.frame(read_excel("./data/raw/time_entering_roost_thyroptera.xlsx"))
dat
dat$sensory_input_categ
dat$sensory_input_categ <- as.factor(paste(dat$treatment, dat$time_of_the_day, sep = "-"))
levels(dat$sensory_input_categ) <- list("Control" = "control-day", "Sound & vision" = "white-noise_no_masking-day", "Sound" =  "white-noise_no_masking-night", "Vision" = "echolocation_masked-day", "Lessen input" = "echolocation_masked-night")
dat$sensory_input_categ
paste(dat$sensory_input_categ, dat$individual)
length(paste(dat$sensory_input_categ, dat$individual))
length(unique(paste(dat$sensory_input_categ, dat$individual)))
length(unique(paste(dat$sensory_input_categ, dat$individual))) / length(unique(dat$individual))
table(table(dat$individual[!duplicated(paste(dat$sensory_input_categ, dat$individual))]))
table(dat$individual[!duplicated(paste(dat$sensory_input_categ, dat$individual))])
tab <- table(dat$individual[!duplicated(paste(dat$sensory_input_categ, dat$individual))])
tab[tab == 1]
nrow(dat)
dat <- dat[!dat$individual %in%  names(tab)[tab == 1], ]
nrow(dat)
model_formulas <- c("time_to_enter ~ sensory_input_categ", "time_to_enter ~ 1")
itrns <- 100000
# Run loops with models
replic_models_categorical <- pblapply(model_formulas, function(x){
# replicate each one 3 times
models <- replicate(3, MCMCglmm(fixed = as.formula(x), random = ~ individual, data = dat, verbose = FALSE, nitt = itrns, start = list(QUASI = FALSE), family = "gaussian", thin = 250, burnin = 10000), simplify = FALSE)
return(models)
})
names(replic_models_categorical) <- model_formulas
models_categorial <- model.sel(lapply(replic_models_categorical, "[[", 1), rank="DIC")
models_categorial
saveRDS(replic_models_categorical, "./output/replic_models_categorical.RDS")
# create a variable with treatment as the sum of sensory inputs involved
dat$sensory_input_sum <- dat$sensory_input_categ
# dat$sensory_input_sum[dat$sensory_input_categ %in% c("Sound", "Vision")] <- 1
# dat$sensory_input_sum[dat$sensory_input_categ == "Lessen input"] <- 0
levels(dat$sensory_input_sum)[levels(dat$sensory_input_sum) %in% c("Vision", "Sound")] <- "1 modality"
levels(dat$sensory_input_sum)[levels(dat$sensory_input_sum) %in% c("Control", "Sound & vision")] <- "2 modalities"
dat$sensory_input_sum <- factor(dat$sensory_input_sum, levels = c("Lessen input", "1 modality", "2 modalities"))
# order levels
dat$sensory_input_sum <- ordered(dat$sensory_input_sum)
# create a variable with treatment binary input
dat$sensory_input_binary <- 1
dat$sensory_input_binary[dat$sensory_input_categ == "Lessen input"] <- 0
model_formulas <- c("time_to_enter ~ sensory_input_sum", #"time_to_enter ~ sensory_input_binary",
"time_to_enter ~ 1")
itrns <- 100000
# Run loops with models
replic_models_ordinal <- pblapply(model_formulas, function(x){
# replicate each one 3 times
models <- replicate(3, MCMCglmm(fixed = as.formula(x), random = ~ individual, data = dat, verbose = FALSE, nitt = itrns, start = list(QUASI = FALSE, family = if (grepl("categ", x)) "gaussian", "ordinal"), thin = 250, burnin = 10000), simplify = FALSE)
return(models)
})
names(replic_models_ordinal) <- model_formulas
models_ordinal <- model.sel(lapply(replic_models_ordinal, "[[", 1), rank="DIC")
models_ordinal
saveRDS(replic_models_ordinal, "./output/replic_models_ordinal.RDS")
# create a variable with treatment as the sum of sensory inputs involved
dat$sensory_input_sum <- dat$sensory_input_categ
levels(dat$sensory_input_sum)[levels(dat$sensory_input_sum) %in% c("Vision", "Sound")] <- "1 modality"
levels(dat$sensory_input_sum)[levels(dat$sensory_input_sum) %in% c("Control", "Sound & vision")] <- "2 modalities"
dat$sensory_input_sum <- factor(dat$sensory_input_sum, levels = c("Lessen input", "1 modality", "2 modalities"))
# order levels
dat$sensory_input_sum <- ordered(dat$sensory_input_sum)
# create a variable with treatment binary input
dat$sensory_input_binary <- 1
dat$sensory_input_binary[dat$sensory_input_categ == "Lessen input"] <- 0
model_formulas <- c("time_to_enter ~ sensory_input_sum", "time_to_enter ~ sensory_input_binary",
"time_to_enter ~ 1")
itrns <- 100000
# Run loops with models
replic_models_ordinal <- pblapply(model_formulas, function(x){
# replicate each one 3 times
models <- replicate(3, MCMCglmm(fixed = as.formula(x), random = ~ individual, data = dat, verbose = FALSE, nitt = itrns, start = list(QUASI = FALSE, family = if (grepl("categ", x)) "gaussian", "ordinal"), thin = 250, burnin = 10000), simplify = FALSE)
return(models)
})
names(replic_models_ordinal) <- model_formulas
models_ordinal <- model.sel(lapply(replic_models_ordinal, "[[", 1), rank="DIC")
models_ordinal
saveRDS(replic_models_ordinal, "./output/replic_models_ordinal.RDS")
md <- replic_models_ordinal$`time_to_enter ~ sensory_input_sum`[[1]]
summary(md)
colnames(md$Sol) <- gsub("sensory_input_", "", colnames(md$Sol))
colnames(md$Sol)
x <- c("readxl", "MCMCglmm", "viridis", "ggplot2", "pbapply", "MuMIn", "grid", "gridExtra")
aa <- lapply(x, function(y) {
if(!y %in% installed.packages()[,"Package"])  install.packages(y)
try(require(y, character.only = T), silent = T)
})
knitr::opts_knit$set(root.dir = normalizePath(".."))
knitr::opts_chunk$set(dpi = 80, fig.width = 12, fig.height = 8, eval = FALSE)
theme_set(theme_classic(base_size = 24))
# create a variable with treatment as the sum of sensory inputs involved
dat$sensory_input_sum <- dat$sensory_input_categ
levels(dat$sensory_input_sum)[levels(dat$sensory_input_sum) %in% c("Vision", "Sound")] <- "1 modality"
levels(dat$sensory_input_sum)[levels(dat$sensory_input_sum) %in% c("Control", "Sound & vision")] <- "2 modalities"
dat$sensory_input_sum <- factor(dat$sensory_input_sum, levels = c("Lessen input", "1 modality", "2 modalities"))
# order levels
dat$sensory_input_sum <- ordered(dat$sensory_input_sum)
# create a variable with treatment binary input
dat$sensory_input_binary <- "sensory input"
dat$sensory_input_binary[dat$sensory_input_categ == "Lessen input"] <- "Lessen input"
dat$sensory_input_binary <- factor(dat$sensory_input_binary, levels = c("Lessen input", "sensory input"))
model_formulas <- c("time_to_enter ~ sensory_input_sum", "time_to_enter ~ sensory_input_binary",
"time_to_enter ~ 1")
itrns <- 100000
# Run loops with models
replic_models_ordinal <- pblapply(model_formulas, function(x){
# replicate each one 3 times
models <- replicate(3, MCMCglmm(fixed = as.formula(x), random = ~ individual, data = dat, verbose = FALSE, nitt = itrns, start = list(QUASI = FALSE, family = "gaussian", thin = 250, burnin = 10000), simplify = FALSE)
return(models)
})
names(replic_models_ordinal) <- model_formulas
models_ordinal <- model.sel(lapply(replic_models_ordinal, "[[", 1), rank="DIC")
models_ordinal
dat <- as.data.frame(read_excel("./data/raw/time_entering_roost_thyroptera.xlsx"))
# ggplot(dat, aes(x = time_to_enter)) + geom_histogram()
dat$sensory_input_categ <- as.factor(paste(dat$treatment, dat$time_of_the_day, sep = "-"))
levels(dat$sensory_input_categ) <- list("Control" = "control-day", "Sound & vision" = "white-noise_no_masking-day", "Sound" =  "white-noise_no_masking-night", "Vision" = "echolocation_masked-day", "Lessen input" = "echolocation_masked-night")
# create a variable with treatment as the sum of sensory inputs involved
dat$sensory_input_sum <- dat$sensory_input_categ
levels(dat$sensory_input_sum)[levels(dat$sensory_input_sum) %in% c("Vision", "Sound")] <- "1 modality"
levels(dat$sensory_input_sum)[levels(dat$sensory_input_sum) %in% c("Control", "Sound & vision")] <- "2 modalities"
dat$sensory_input_sum <- factor(dat$sensory_input_sum, levels = c("Lessen input", "1 modality", "2 modalities"))
# order levels
dat$sensory_input_sum <- ordered(dat$sensory_input_sum)
# create a variable with treatment binary input
dat$sensory_input_binary <- "sensory input"
dat$sensory_input_binary[dat$sensory_input_categ == "Lessen input"] <- "Lessen input"
dat$sensory_input_binary <- factor(dat$sensory_input_binary, levels = c("Lessen input", "sensory input"))
model_formulas <- c("time_to_enter ~ sensory_input_sum", "time_to_enter ~ sensory_input_binary",
"time_to_enter ~ 1")
itrns <- 100000
# Run loops with models
replic_models_ordinal <- pblapply(model_formulas, function(x){
# replicate each one 3 times
models <- replicate(3, MCMCglmm(fixed = as.formula(x), random = ~ individual, data = dat, verbose = FALSE, nitt = itrns, start = list(QUASI = FALSE, family = "gaussian", thin = 250, burnin = 10000), simplify = FALSE)
return(models)
})
names(replic_models_ordinal) <- model_formulas
models_ordinal <- model.sel(lapply(replic_models_ordinal, "[[", 1), rank="DIC")
models_ordinal
# create a variable with treatment as the sum of sensory inputs involved
dat$sensory_input_sum <- dat$sensory_input_categ
levels(dat$sensory_input_sum)[levels(dat$sensory_input_sum) %in% c("Vision", "Sound")] <- "1 modality"
levels(dat$sensory_input_sum)[levels(dat$sensory_input_sum) %in% c("Control", "Sound & vision")] <- "2 modalities"
dat$sensory_input_sum <- factor(dat$sensory_input_sum, levels = c("Lessen input", "1 modality", "2 modalities"))
# order levels
dat$sensory_input_sum <- ordered(dat$sensory_input_sum)
# create a variable with treatment binary input
dat$sensory_input_binary <- "sensory input"
dat$sensory_input_binary[dat$sensory_input_categ == "Lessen input"] <- "Lessen input"
dat$sensory_input_binary <- factor(dat$sensory_input_binary, levels = c("Lessen input", "sensory input"))
model_formulas <- c("time_to_enter ~ sensory_input_sum", "time_to_enter ~ sensory_input_binary",
"time_to_enter ~ 1")
itrns <- 100000
# Run loops with models
# replicate each one 3 times
models <- replicate(3, MCMCglmm(fixed = as.formula(x), random = ~ individual, data = dat, verbose = FALSE, nitt = itrns, start = list(QUASI = FALSE, family = "gaussian", thin = 250, burnin = 10000), simplify = FALSE)
return(models)
})
# create a variable with treatment as the sum of sensory inputs involved
dat$sensory_input_sum <- dat$sensory_input_categ
levels(dat$sensory_input_sum)[levels(dat$sensory_input_sum) %in% c("Vision", "Sound")] <- "1 modality"
levels(dat$sensory_input_sum)[levels(dat$sensory_input_sum) %in% c("Control", "Sound & vision")] <- "2 modalities"
dat$sensory_input_sum <- factor(dat$sensory_input_sum, levels = c("Lessen input", "1 modality", "2 modalities"))
# order levels
dat$sensory_input_sum <- ordered(dat$sensory_input_sum)
# create a variable with treatment binary input
dat$sensory_input_binary <- "sensory input"
dat$sensory_input_binary[dat$sensory_input_categ == "Lessen input"] <- "Lessen input"
dat$sensory_input_binary <- factor(dat$sensory_input_binary, levels = c("Lessen input", "sensory input"))
model_formulas <- c("time_to_enter ~ sensory_input_sum", "time_to_enter ~ sensory_input_binary",
"time_to_enter ~ 1")
itrns <- 100000
# Run loops with models
replic_models_ordinal <- pblapply(model_formulas, function(x){
# replicate each one 3 times
models <- replicate(3, MCMCglmm(fixed = as.formula(x), random = ~ individual, data = dat, verbose = FALSE, nitt = itrns, start = list(QUASI = FALSE, thin = 250, burnin = 10000), simplify = FALSE)
return(models)
})
names(replic_models_ordinal) <- model_formulas
models_ordinal <- model.sel(lapply(replic_models_ordinal, "[[", 1), rank="DIC")
models_ordinal
# create a variable with treatment as the sum of sensory inputs involved
dat$sensory_input_sum <- dat$sensory_input_categ
levels(dat$sensory_input_sum)[levels(dat$sensory_input_sum) %in% c("Vision", "Sound")] <- "1 modality"
levels(dat$sensory_input_sum)[levels(dat$sensory_input_sum) %in% c("Control", "Sound & vision")] <- "2 modalities"
dat$sensory_input_sum <- factor(dat$sensory_input_sum, levels = c("Lessen input", "1 modality", "2 modalities"))
# order levels
dat$sensory_input_sum <- ordered(dat$sensory_input_sum)
# create a variable with treatment binary input
dat$sensory_input_binary <- "sensory input"
dat$sensory_input_binary[dat$sensory_input_categ == "Lessen input"] <- "Lessen input"
dat$sensory_input_binary <- factor(dat$sensory_input_binary, levels = c("Lessen input", "sensory input"))
model_formulas <- c("time_to_enter ~ sensory_input_sum", "time_to_enter ~ sensory_input_binary",
"time_to_enter ~ 1")
itrns <- 100000
# Run loops with models
replic_models_ordinal <- pblapply(model_formulas, function(x){
# replicate each one 3 times
models <- replicate(3, MCMCglmm(fixed = as.formula(x), random = ~ individual, data = dat, verbose = FALSE, nitt = itrns, start = list(QUASI = FALSE, thin = 250, burnin = 10000), simplify = FALSE))
return(models)
})
names(replic_models_ordinal) <- model_formulas
models_ordinal <- model.sel(lapply(replic_models_ordinal, "[[", 1), rank="DIC")
models_ordinal
# create a variable with treatment as the sum of sensory inputs involved
dat$sensory_input_sum <- dat$sensory_input_categ
levels(dat$sensory_input_sum)[levels(dat$sensory_input_sum) %in% c("Vision", "Sound")] <- "1 modality"
levels(dat$sensory_input_sum)[levels(dat$sensory_input_sum) %in% c("Control", "Sound & vision")] <- "2 modalities"
dat$sensory_input_sum <- factor(dat$sensory_input_sum, levels = c("Lessen input", "1 modality", "2 modalities"))
# order levels
dat$sensory_input_sum <- ordered(dat$sensory_input_sum)
# create a variable with treatment binary input
dat$sensory_input_binary <- "sensory input"
dat$sensory_input_binary[dat$sensory_input_categ == "Lessen input"] <- "Lessen input"
dat$sensory_input_binary <- factor(dat$sensory_input_binary, levels = c("Lessen input", "sensory input"))
model_formulas <- c("time_to_enter ~ sensory_input_sum", "time_to_enter ~ sensory_input_binary",
"time_to_enter ~ 1")
itrns <- 100000
# Run loops with models
replic_models_ordinal <- pblapply(model_formulas, function(x){
# replicate each one 3 times
models <- replicate(3, MCMCglmm(fixed = as.formula(x), random = ~ individual, data = dat, verbose = FALSE, nitt = itrns, start = list(QUASI = FALSE, thin = 250, burnin = 10000), simplify = FALSE))
return(models)
})
names(replic_models_ordinal) <- model_formulas
models_ordinal <- model.sel(lapply(replic_models_ordinal, "[[", 1), rank="DIC")
models_ordinal
# create a variable with treatment as the sum of sensory inputs involved
dat$sensory_input_sum <- dat$sensory_input_categ
levels(dat$sensory_input_sum)[levels(dat$sensory_input_sum) %in% c("Vision", "Sound")] <- "1 modality"
levels(dat$sensory_input_sum)[levels(dat$sensory_input_sum) %in% c("Control", "Sound & vision")] <- "2 modalities"
dat$sensory_input_sum <- factor(dat$sensory_input_sum, levels = c("Lessen input", "1 modality", "2 modalities"))
# order levels
dat$sensory_input_sum <- ordered(dat$sensory_input_sum)
# create a variable with treatment binary input
dat$sensory_input_binary <- "sensory input"
dat$sensory_input_binary[dat$sensory_input_categ == "Lessen input"] <- "Lessen input"
dat$sensory_input_binary <- factor(dat$sensory_input_binary, levels = c("Lessen input", "sensory input"))
model_formulas <- c("time_to_enter ~ sensory_input_sum", "time_to_enter ~ sensory_input_binary",
"time_to_enter ~ 1")
itrns <- 100000
# Run loops with models
replic_models_ordinal <- pblapply(model_formulas, function(x){
# replicate each one 3 times
models <- replicate(3, MCMCglmm(fixed = as.formula(x), random = ~ individual, data = dat, verbose = FALSE, nitt = itrns, start = list(QUASI = FALSE, thin = 250, burnin = 10000), simplify = FALSE))
return(models)
})
names(replic_models_ordinal) <- model_formulas
models_ordinal <- model.sel(lapply(replic_models_ordinal, "[[", 1), rank="DIC")
models_ordinal
# Run loops with models
replic_models_ordinal <- pblapply(model_formulas, function(x){
# replicate each one 3 times
models <- replicate(3, MCMCglmm(fixed = as.formula(x), random = ~ individual, data = dat, verbose = FALSE, nitt = itrns, start = list(QUASI = FALSE, thin = 250, burnin = 10000), simplify = FALSE))
return(models)
})
# create a variable with treatment as the sum of sensory inputs involved
dat$sensory_input_sum <- dat$sensory_input_categ
levels(dat$sensory_input_sum)[levels(dat$sensory_input_sum) %in% c("Vision", "Sound")] <- "1 modality"
levels(dat$sensory_input_sum)[levels(dat$sensory_input_sum) %in% c("Control", "Sound & vision")] <- "2 modalities"
dat$sensory_input_sum <- factor(dat$sensory_input_sum, levels = c("Lessen input", "1 modality", "2 modalities"))
# order levels
dat$sensory_input_sum <- ordered(dat$sensory_input_sum)
# create a variable with treatment binary input
dat$sensory_input_binary <- "sensory input"
dat$sensory_input_binary[dat$sensory_input_categ == "Lessen input"] <- "Lessen input"
dat$sensory_input_binary <- factor(dat$sensory_input_binary, levels = c("Lessen input", "sensory input"))
model_formulas <- c("time_to_enter ~ sensory_input_sum", "time_to_enter ~ sensory_input_binary",
"time_to_enter ~ 1")
itrns <- 100000
# Run loops with models
replic_models_ordinal <- pblapply(model_formulas, function(x){
# replicate each one 3 times
models <- replicate(3, MCMCglmm(fixed = as.formula(x), random = ~ individual, data = dat, verbose = FALSE, nitt = itrns, start = list(QUASI = FALSE), thin = 250, burnin = 10000)), simplify = FALSE)
return(models)
})
names(replic_models_ordinal) <- model_formulas
models_ordinal <- model.sel(lapply(replic_models_ordinal, "[[", 1), rank="DIC")
models_ordinal
# create a variable with treatment as the sum of sensory inputs involved
dat$sensory_input_sum <- dat$sensory_input_categ
levels(dat$sensory_input_sum)[levels(dat$sensory_input_sum) %in% c("Vision", "Sound")] <- "1 modality"
levels(dat$sensory_input_sum)[levels(dat$sensory_input_sum) %in% c("Control", "Sound & vision")] <- "2 modalities"
dat$sensory_input_sum <- factor(dat$sensory_input_sum, levels = c("Lessen input", "1 modality", "2 modalities"))
# order levels
dat$sensory_input_sum <- ordered(dat$sensory_input_sum)
# create a variable with treatment binary input
dat$sensory_input_binary <- "sensory input"
dat$sensory_input_binary[dat$sensory_input_categ == "Lessen input"] <- "Lessen input"
dat$sensory_input_binary <- factor(dat$sensory_input_binary, levels = c("Lessen input", "sensory input"))
model_formulas <- c("time_to_enter ~ sensory_input_sum", "time_to_enter ~ sensory_input_binary",
"time_to_enter ~ 1")
itrns <- 100000
# Run loops with models
replic_models_ordinal <- pblapply(model_formulas, function(x){
# replicate each one 3 times
models <- replicate(3, MCMCglmm(fixed = as.formula(x), random = ~ individual, data = dat, verbose = FALSE, nitt = itrns, start = list(QUASI = FALSE), thin = 250, burnin = 10000), simplify = FALSE)
return(models)
})
names(replic_models_ordinal) <- model_formulas
models_ordinal <- model.sel(lapply(replic_models_ordinal, "[[", 1), rank="DIC")
models_ordinal
saveRDS(replic_models_ordinal, "./output/replic_models_ordinal.RDS")
nrow(dat)
