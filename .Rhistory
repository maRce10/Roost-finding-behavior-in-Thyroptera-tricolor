invisible(close.screen(all.screens = TRUE))
tiff(filename = "./output/diagram_experimental_design.tiff", res = 300, width = 3500, height = 2000)
sc <- split.screen(figs = m)
## sound and vision
screen(2)
par(mar = c(3, 6, 1, 1))
warbleR:::spectro_wrblr_int2(subwv, grid = FALSE, collev.min = -35, wl = 120, palette = reverse.viridis, ovlp = ovlp, zp = 1000, tlim = c(0.001, 0.0085), axisX = FALSE, tlab = NULL, axisY = FALSE, flab = NULL, flim = c(0, 220))
box(lwd = bl)
axis(side = 2, cex.axis = cex, labels = c(0, 100, 200), at = c(0, 100, 200))
mtext(side = 2, text = "Frequency (kHz)", line = 4, cex = cex)
mtext(side = 1, text = "Sound & vision  ", line = 1.5, cex = cex)
## vision
screen(3)
par(mar = c(3, 6, 1, 1))
warbleR:::spectro_wrblr_int2(subwv + mask * 1000, grid = FALSE, collev.min = -35, wl = 120, palette = reverse.viridis, ovlp = ovlp, zp = 1000, tlim = c(0.001, 0.0085), axisX = FALSE, tlab = NULL, axisY = FALSE, flab = NULL, flim = c(0, 220))
box(lwd = bl)
axis(side = 2, cex.axis = cex, labels = c(0, 100, 200), at = c(0, 100, 200))
mtext(side = 1, text = "Vision", line = 1.5, cex = cex)
## Noise control
screen(4)
par(mar = c(3, 6, 1, 1), new = TRUE)
warbleR:::spectro_wrblr_int2(subwv  + no_mask * 1000, grid = FALSE, collev.min = -35, wl = 120, palette = reverse.viridis, ovlp = ovlp, zp = 1000, tlim = c(0.001, 0.0085), axisX = FALSE, tlab = NULL, axisY = FALSE, flab = NULL, flim = c(0, 220))
box(lwd = bl)
axis(side = 2, cex.axis = cex, labels = c(0, 100, 200), at = c(0, 100, 200))
mtext(side = 1, text = "Noise control", line = 1.5, cex = cex)
## sound
par(bg = "black", new = TRUE)
screen(6)
par(mar = c(3, 8.5, 1, 1))
warbleR:::spectro_wrblr_int2(subwv, grid = FALSE, collev.min = -35, wl = 120, palette = reverse.viridis, ovlp = ovlp, zp = 1000, tlim = c(0.001, 0.0085), axisX = FALSE, tlab = NULL, axisY = FALSE, flab = NULL, flim = c(0, 220))
box(lwd = bl, col = "white")
axis(side = 2, cex.axis = cex, labels = c(0, 100, 200), at = c(0, 100, 200), col.ticks = "white", col = "white", col.axis = "white")
mtext(side = 1, text = "Sound", line = 1.5, cex = cex, col = "white")
## lessen input
par(bg = "black", new = TRUE)
screen(7)
par(mar = c(3, 8.5, 1, 1))
# par(mar = c(1, 9, 1, 1), bg = "black", new = TRUE)
warbleR:::spectro_wrblr_int2(subwv + mask * 1000, grid = FALSE, collev.min = -35, wl = 120, palette = reverse.viridis, ovlp = ovlp, zp = 1000, tlim = c(0.001, 0.0085), axisX = FALSE, tlab = NULL, axisY = FALSE, flab = NULL, flim = c(0, 220))
box(lwd = bl, col = "white")
axis(side = 2, cex.axis = cex, labels = c(0, 100, 200), at = c(0, 100, 200), col.ticks = "white", col = "white", col.axis = "white")
mtext(side = 1, text = "Lessen input", line = 1.5, cex = cex, col = "white")
# dev.off()
par(bg = "black", new = TRUE)
screen(5)
par(mar = c(0, 0, 0, 0))
plot(1, frame.plot = FALSE, type = "n")
text(x = 1, y = 1.05, "Nighttime", srt = 90,
cex = 1.2 * cex, col = "white")
par(bg = "black", new = TRUE)
screen(8)
par(bg = "white", new = TRUE)
screen(1)
par(mar = c(0, 0, 0, 0))
plot(1, frame.plot = FALSE, type = "n")
text(x = 1, y = 1.05, "Daytime", srt = 90,
cex = 1.2 * cex)
dev.off()
cols <- viridis(10)
agg_dat <- aggregate(time_to_enter ~ sensory_input, dat, mean)
# Chunk 1: packages
x <- c("readxl", "brms", "viridis", "ggplot2", "pbapply", "cowplot", "kableExtra", "warbleR", github = "maRce10/brmsish")
source("https://raw.githubusercontent.com/maRce10/sketchy/main/R/load_packages.R")
load_packages(x)
# Chunk 2: options and functions
knitr::opts_knit$set(root.dir = normalizePath(".."))
knitr::opts_chunk$set(dpi = 80, fig.width = 12, fig.height = 8, eval = FALSE, warning = FALSE, message = FALSE)
theme_set(theme_classic(base_size = 24))
source("~/Dropbox/R_package_testing/brmsish/R/contrasts.R")
source("~/Dropbox/R_package_testing/brmsish/R/html_summary.R")
source("~/Dropbox/R_package_testing/brmsish/R/read_summary.R")
# Chunk 4
total_dat <- read.csv("https://raw.githubusercontent.com/maRce10/Roost-finding-behavior-in-Thyroptera-tricolor/main/data/raw/time_entering_roost_thyroptera.csv")
total_dat$sensory_input <- factor(total_dat$sensory_input, levels = c("Sound & vision", "Noise control", "Sound", "Vision", "Lessen input"))
# Chunk 5: exclude individuals with 1 experiment
tab <- table(total_dat$individual[!duplicated(paste(total_dat$sensory_input, total_dat$individual))])
dat <- total_dat[!total_dat$individual %in% names(tab)[tab == 1], ]
# Chunk 6
# Dates
table(dat$date)
# Chunk 7
table(dat$individual)
# Chunk 8
aggregate(individual ~ sensory_input, dat, function(x) length(unique(x)))
# Chunk 9
table(dat$individual[!duplicated(paste(dat$sensory_input, dat$individual))])
# Chunk 10
table(table(dat$individual[!duplicated(paste(dat$sensory_input, dat$individual))]))
# Chunk 11
table(dat$sensory_input, dat$time_of_the_day)
# Chunk 12
table(dat$sensory_input[!duplicated(paste(dat$sensory_input, dat$individual))], dat$time_of_the_day[!duplicated(paste(dat$sensory_input, dat$individual))])
cols <- viridis(10)
agg_dat <- aggregate(time_to_enter ~ sensory_input, dat, mean)
agg_dat$sd <- aggregate(time_to_enter ~ sensory_input, dat, sd)[, 2]
agg_dat$n <- sapply(1:nrow(agg_dat), function(x) length(unique(dat$individual[dat$sensory_input == agg_dat$sensory_input[x]])))
agg_dat$labels <- c("a", "a", "a", "a", "b")
agg_dat$n.labels <- paste("n =", agg_dat$n)
agg_dat$sensory_input <- factor(agg_dat$sensory_input)
# raincoud plot:
fill_color <- adjustcolor("#e85307", 0.6)
ggplot(dat, aes(y = time_to_enter, x = sensory_input)) +
## add half-violin from {ggdist} package
ggdist::stat_halfeye(
fill = fill_color,
alpha = 0.5,
## custom bandwidth
adjust = .5,
## adjust height
width = .6,
.width = 0,
## move geom to the cright
justification = -.2,
point_colour = NA
) +
geom_boxplot(fill = fill_color,
width = .15,
## remove outliers
outlier.shape = NA ## `outlier.shape = NA` works as well
) +
## add justified jitter from the {gghalves} package
gghalves::geom_half_point(
color = fill_color,
## draw jitter on the left
side = "l",
## control range of jitter
range_scale = .4,
## add some transparency
alpha = .5,
) +
labs(x=" ", y="Average Nearest Neighbor Distance (mm)"
) +
ylim(c(-30, 310)) +
geom_text(data = agg_dat, aes(y = rep(-25, 5), x = sensory_input, label = n.labels), nudge_x = -0.13, size = 6) +
scale_x_discrete(labels=c("Control" = "Noise control", "Sound vision" = "Sound & vision", "Vision" = "Vision", "Lessen input" = "Lessen input")) +
labs(x = "Sensory input       ", y = "Time to enter roost (s)") + theme(axis.text.x = element_text(angle = 15, hjust = 1))
ggsave(filename = "./output/time_to_enter_by_treatment.tiff", dpi = 300, width = 3000, height = 1500, units = "px")
source("~/.active-rstudio-document", echo=TRUE)
cols <- viridis(10)
agg_dat <- aggregate(time_to_enter ~ sensory_input, dat, mean)
agg_dat$n <- sapply(1:nrow(agg_dat), function(x) length(unique(dat$individual[dat$sensory_input == agg_dat$sensory_input[x]])))
agg_dat$n.labels <- paste("n =", agg_dat$n)
agg_dat$sensory_input <- factor(agg_dat$sensory_input)
# raincoud plot:
fill_color <- adjustcolor("#e85307", 0.6)
ggplot(dat, aes(y = time_to_enter, x = sensory_input)) +
# add half-violin from {ggdist} package
ggdist::stat_halfeye(
fill = fill_color,
alpha = 0.5,
# custom bandwidth
adjust = .5,
# adjust height
width = .6,
.width = 0,
# move geom to the cright
justification = -.2,
point_colour = NA
) +
geom_boxplot(fill = fill_color,
width = .15,
# remove outliers
outlier.shape = NA # `outlier.shape = NA` works as well
) +
# add justified jitter from the {gghalves} package
gghalves::geom_half_point(
color = fill_color,
# draw jitter on the left
side = "l",
# control range of jitter
range_scale = .4,
# add some transparency
alpha = .5,
) +
ylim(c(-30, 310)) +
geom_text(data = agg_dat, aes(y = rep(-25, 5), x = sensory_input, label = n.labels), nudge_x = -0.13, size = 6) +
scale_x_discrete(labels=c("Control" = "Noise control", "Sound vision" = "Sound & vision", "Vision" = "Vision", "Lessen input" = "Lessen input")) +
labs(x = "Sensory input       ", y = "Time to enter roost (s)") + theme(axis.text.x = element_text(angle = 15, hjust = 1))
# ggsave(filename = "./output/time_to_enter_by_treatment.tiff", dpi = 300, width = 3000, height = 1500, units = "px")
is.na(NULL)
NULL == "mod"
source("~/Dropbox/R_package_testing/brmsish/R/html_summary.R")
# set working directory as project directory or one directory above,
rootdir <- try(rprojroot::find_rstudio_root_file(), silent = TRUE)
if (is(rootdir, "try-error")) rootdir <-  ".."
knitr::opts_knit$set(root.dir = rootdir)
# print link to github repo if any
if (file.exists("./.git/config")){
config <- readLines("./.git/config")
url <- grep("url",  config, value = TRUE)
url <- gsub("\\turl = |.git$", "", url)
cat("\nSource code and data found at [", url, "](", url, ")", sep = "")
}
# options to customize chunk outputs
knitr::opts_chunk$set(
class.source = "numberLines lineAnchors", # for code line numbers
tidy.opts = list(width.cutoff = 65),
tidy = TRUE,
message = FALSE
)
source("https://raw.githubusercontent.com/maRce10/sketchy/main/R/load_packages.R")
load_packages(c("readxl", "brms", "viridis", "ggplot2", "pbapply", "cowplot", "kableExtra", "warbleR", github = "maRce10/brmsish"))
knitr::opts_knit$set(root.dir = normalizePath(".."))
knitr::opts_chunk$set(dpi = 80, fig.width = 12, fig.height = 8, eval = FALSE, warning = FALSE, message = FALSE)
theme_set(theme_classic(base_size = 24))
source("~/Dropbox/R_package_testing/brmsish/R/contrasts.R")
source("~/Dropbox/R_package_testing/brmsish/R/fit_summary.R")
source("~/Dropbox/R_package_testing/brmsish/R/read_summary.R")
source("~/Dropbox/R_package_testing/brmsish/R/helpers.R")
total_dat <- read.csv("https://raw.githubusercontent.com/maRce10/Roost-finding-behavior-in-Thyroptera-tricolor/main/data/raw/time_entering_roost_thyroptera.csv")
total_dat$sensory_input <- factor(total_dat$sensory_input, levels = c("Sound & vision", "Noise control", "Sound", "Vision", "Lessen input"))
tab <- table(total_dat$individual[!duplicated(paste(total_dat$sensory_input, total_dat$individual))])
dat <- total_dat[!total_dat$individual %in% names(tab)[tab == 1], ]
# Dates
table(dat$date)
table(dat$individual)
aggregate(individual ~ sensory_input, dat, function(x) length(unique(x)))
table(dat$individual[!duplicated(paste(dat$sensory_input, dat$individual))])
table(table(dat$individual[!duplicated(paste(dat$sensory_input, dat$individual))]))
table(dat$sensory_input, dat$time_of_the_day)
table(dat$sensory_input[!duplicated(paste(dat$sensory_input, dat$individual))], dat$time_of_the_day[!duplicated(paste(dat$sensory_input, dat$individual))])
cols <- viridis(10)
agg_dat <- aggregate(time_to_enter ~ sensory_input, dat, mean)
agg_dat$n <- sapply(1:nrow(agg_dat), function(x) length(unique(dat$individual[dat$sensory_input == agg_dat$sensory_input[x]])))
agg_dat$n.labels <- paste("n =", agg_dat$n)
agg_dat$sensory_input <- factor(agg_dat$sensory_input)
# raincoud plot:
fill_color <- adjustcolor("#e85307", 0.6)
ggplot(dat, aes(y = time_to_enter, x = sensory_input)) +
# add half-violin from {ggdist} package
ggdist::stat_halfeye(
fill = fill_color,
alpha = 0.5,
# custom bandwidth
adjust = .5,
# adjust height
width = .6,
.width = 0,
# move geom to the cright
justification = -.2,
point_colour = NA
) +
geom_boxplot(fill = fill_color,
width = .15,
# remove outliers
outlier.shape = NA # `outlier.shape = NA` works as well
) +
# add justified jitter from the {gghalves} package
gghalves::geom_half_point(
color = fill_color,
# draw jitter on the left
side = "l",
# control range of jitter
range_scale = .4,
# add some transparency
alpha = .5,
) +
ylim(c(-30, 310)) +
geom_text(data = agg_dat, aes(y = rep(-25, 5), x = sensory_input, label = n.labels), nudge_x = -0.13, size = 6) +
scale_x_discrete(labels=c("Control" = "Noise control", "Sound vision" = "Sound & vision", "Vision" = "Vision", "Lessen input" = "Lessen input")) +
labs(x = "Sensory input       ", y = "Time to enter roost (s)") + theme(axis.text.x = element_text(angle = 15, hjust = 1))
# ggsave(filename = "./output/time_to_enter_by_treatment.tiff", dpi = 300, width = 3000, height = 1500, units = "px")
# set working directory as project directory or one directory above,
rootdir <- try(rprojroot::find_rstudio_root_file(), silent = TRUE)
if (is(rootdir, "try-error")) rootdir <-  ".."
knitr::opts_knit$set(root.dir = rootdir)
# print link to github repo if any
if (file.exists("./.git/config")){
config <- readLines("./.git/config")
url <- grep("url",  config, value = TRUE)
url <- gsub("\\turl = |.git$", "", url)
cat("\nSource code and data found at [", url, "](", url, ")", sep = "")
}
# options to customize chunk outputs
knitr::opts_chunk$set(
class.source = "numberLines lineAnchors", # for code line numbers
tidy.opts = list(width.cutoff = 65),
tidy = TRUE,
message = FALSE
)
source("https://raw.githubusercontent.com/maRce10/sketchy/main/R/load_packages.R")
load_packages(c("readxl", "brms", "viridis", "ggplot2", "pbapply", "cowplot", "kableExtra", "warbleR", github = "maRce10/brmsish"))
knitr::opts_knit$set(root.dir = normalizePath(".."))
knitr::opts_chunk$set(dpi = 80, fig.width = 12, fig.height = 8, eval = FALSE, warning = FALSE, message = FALSE)
theme_set(theme_classic(base_size = 24))
source("~/Dropbox/R_package_testing/brmsish/R/contrasts.R")
source("~/Dropbox/R_package_testing/brmsish/R/fit_summary.R")
source("~/Dropbox/R_package_testing/brmsish/R/read_summary.R")
source("~/Dropbox/R_package_testing/brmsish/R/helpers.R")
total_dat <- read.csv("https://raw.githubusercontent.com/maRce10/Roost-finding-behavior-in-Thyroptera-tricolor/main/data/raw/time_entering_roost_thyroptera.csv")
total_dat$sensory_input <- factor(total_dat$sensory_input, levels = c("Sound & vision", "Noise control", "Sound", "Vision", "Lessen input"))
tab <- table(total_dat$individual[!duplicated(paste(total_dat$sensory_input, total_dat$individual))])
dat <- total_dat[!total_dat$individual %in% names(tab)[tab == 1], ]
# Dates
table(dat$date)
table(dat$individual)
aggregate(individual ~ sensory_input, dat, function(x) length(unique(x)))
table(dat$individual[!duplicated(paste(dat$sensory_input, dat$individual))])
table(table(dat$individual[!duplicated(paste(dat$sensory_input, dat$individual))]))
table(dat$sensory_input, dat$time_of_the_day)
table(dat$sensory_input[!duplicated(paste(dat$sensory_input, dat$individual))], dat$time_of_the_day[!duplicated(paste(dat$sensory_input, dat$individual))])
cols <- viridis(10)
agg_dat <- aggregate(time_to_enter ~ sensory_input, dat, mean)
agg_dat$n <- sapply(1:nrow(agg_dat), function(x) length(unique(dat$individual[dat$sensory_input == agg_dat$sensory_input[x]])))
agg_dat$n.labels <- paste("n =", agg_dat$n)
agg_dat$sensory_input <- factor(agg_dat$sensory_input)
# raincoud plot:
fill_color <- adjustcolor("#e85307", 0.6)
ggplot(dat, aes(y = time_to_enter, x = sensory_input)) +
# add half-violin from {ggdist} package
ggdist::stat_halfeye(
fill = fill_color,
alpha = 0.5,
# custom bandwidth
adjust = .5,
# adjust height
width = .6,
.width = 0,
# move geom to the cright
justification = -.2,
point_colour = NA
) +
geom_boxplot(fill = fill_color,
width = .15,
# remove outliers
outlier.shape = NA # `outlier.shape = NA` works as well
) +
# add justified jitter from the {gghalves} package
gghalves::geom_half_point(
color = fill_color,
# draw jitter on the left
side = "l",
# control range of jitter
range_scale = .4,
# add some transparency
alpha = .5,
) +
ylim(c(-30, 310)) +
geom_text(data = agg_dat, aes(y = rep(-25, 5), x = sensory_input, label = n.labels), nudge_x = -0.13, size = 6) +
scale_x_discrete(labels=c("Control" = "Noise control", "Sound vision" = "Sound & vision", "Vision" = "Vision", "Lessen input" = "Lessen input")) +
labs(x = "Sensory input       ", y = "Time to enter roost (s)") + theme(axis.text.x = element_text(angle = 15, hjust = 1))
# ggsave(filename = "./output/time_to_enter_by_treatment.tiff", dpi = 300, width = 3000, height = 1500, units = "px")
brms_models <- readRDS("./data/processed/regresion_models_brms.RDS")
comp_mods <- loo_compare(brms_models[[1]], brms_models[[2]], model_names = names(brms_models))
df1 <- kbl(comp_mods, row.names = TRUE, escape = FALSE, format = "html", digits = 3)
cat("Compare models:")
kable_styling(df1, bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = FALSE, font_size = 12)
cat("Best model:\n")
cat(paste("-  ", rownames(comp_mods)[1], "\n"))
# best model
if (!grepl("1 +", rownames(comp_mods)[1], fixed = TRUE))
fit_summary(fit = brms_models[[rownames(comp_mods)[1]]], gsub.pattern = "sensory_input", gsub.replacement = "", fill = "#e85307", trace.palette = terrain.colors)
# Chunk 1: set root directory
# set working directory as project directory or one directory above,
rootdir <- try(rprojroot::find_rstudio_root_file(), silent = TRUE)
if (is(rootdir, "try-error")) rootdir <-  ".."
knitr::opts_knit$set(root.dir = rootdir)
# Chunk 2: add link to github repo
# print link to github repo if any
if (file.exists("./.git/config")){
config <- readLines("./.git/config")
url <- grep("url",  config, value = TRUE)
url <- gsub("\\turl = |.git$", "", url)
cat("\nSource code and data found at [", url, "](", url, ")", sep = "")
}
# Chunk 3: setup style
# options to customize chunk outputs
knitr::opts_chunk$set(
class.source = "numberLines lineAnchors", # for code line numbers
tidy.opts = list(width.cutoff = 65),
tidy = TRUE,
message = FALSE
)
# Chunk 4: packages
source("https://raw.githubusercontent.com/maRce10/sketchy/main/R/load_packages.R")
load_packages(c("readxl", "brms", "viridis", "ggplot2", "pbapply", "cowplot", "kableExtra", "warbleR", github = "maRce10/brmsish"))
# Chunk 5: options and functions
knitr::opts_knit$set(root.dir = normalizePath(".."))
knitr::opts_chunk$set(dpi = 80, fig.width = 12, fig.height = 8, eval = FALSE, warning = FALSE, message = FALSE)
theme_set(theme_classic(base_size = 24))
source("~/Dropbox/R_package_testing/brmsish/R/contrasts.R")
source("~/Dropbox/R_package_testing/brmsish/R/fit_summary.R")
source("~/Dropbox/R_package_testing/brmsish/R/read_summary.R")
source("~/Dropbox/R_package_testing/brmsish/R/helpers.R")
# Chunk 7
total_dat <- read.csv("https://raw.githubusercontent.com/maRce10/Roost-finding-behavior-in-Thyroptera-tricolor/main/data/raw/time_entering_roost_thyroptera.csv")
total_dat$sensory_input <- factor(total_dat$sensory_input, levels = c("Sound & vision", "Noise control", "Sound", "Vision", "Lessen input"))
# Chunk 8: exclude individuals with 1 experiment
tab <- table(total_dat$individual[!duplicated(paste(total_dat$sensory_input, total_dat$individual))])
dat <- total_dat[!total_dat$individual %in% names(tab)[tab == 1], ]
# Chunk 9
# Dates
table(dat$date)
# Chunk 10
table(dat$individual)
# Chunk 11
aggregate(individual ~ sensory_input, dat, function(x) length(unique(x)))
# Chunk 12
table(dat$individual[!duplicated(paste(dat$sensory_input, dat$individual))])
# Chunk 13
table(table(dat$individual[!duplicated(paste(dat$sensory_input, dat$individual))]))
# Chunk 14
table(dat$sensory_input, dat$time_of_the_day)
# Chunk 15
table(dat$sensory_input[!duplicated(paste(dat$sensory_input, dat$individual))], dat$time_of_the_day[!duplicated(paste(dat$sensory_input, dat$individual))])
# Chunk 16
cols <- viridis(10)
agg_dat <- aggregate(time_to_enter ~ sensory_input, dat, mean)
agg_dat$n <- sapply(1:nrow(agg_dat), function(x) length(unique(dat$individual[dat$sensory_input == agg_dat$sensory_input[x]])))
agg_dat$n.labels <- paste("n =", agg_dat$n)
agg_dat$sensory_input <- factor(agg_dat$sensory_input)
# raincoud plot:
fill_color <- adjustcolor("#e85307", 0.6)
ggplot(dat, aes(y = time_to_enter, x = sensory_input)) +
# add half-violin from {ggdist} package
ggdist::stat_halfeye(
fill = fill_color,
alpha = 0.5,
# custom bandwidth
adjust = .5,
# adjust height
width = .6,
.width = 0,
# move geom to the cright
justification = -.2,
point_colour = NA
) +
geom_boxplot(fill = fill_color,
width = .15,
# remove outliers
outlier.shape = NA # `outlier.shape = NA` works as well
) +
# add justified jitter from the {gghalves} package
gghalves::geom_half_point(
color = fill_color,
# draw jitter on the left
side = "l",
# control range of jitter
range_scale = .4,
# add some transparency
alpha = .5,
) +
ylim(c(-30, 310)) +
geom_text(data = agg_dat, aes(y = rep(-25, 5), x = sensory_input, label = n.labels), nudge_x = -0.13, size = 6) +
scale_x_discrete(labels=c("Control" = "Noise control", "Sound vision" = "Sound & vision", "Vision" = "Vision", "Lessen input" = "Lessen input")) +
labs(x = "Sensory input       ", y = "Time to enter roost (s)") + theme(axis.text.x = element_text(angle = 15, hjust = 1))
# ggsave(filename = "./output/time_to_enter_by_treatment.tiff", dpi = 300, width = 3000, height = 1500, units = "px")
brms_models <- readRDS("./data/processed/regresion_models_brms.RDS")
comp_mods <- loo_compare(brms_models[[1]], brms_models[[2]], model_names = names(brms_models))
df1 <- kbl(comp_mods, row.names = TRUE, escape = FALSE, format = "html", digits = 3)
cat("Compare models:")
kable_styling(df1, bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = FALSE, font_size = 12)
cat("Best model:\n")
cat(paste("-  ", rownames(comp_mods)[1], "\n"))
# best model
if (!grepl("1 +", rownames(comp_mods)[1], fixed = TRUE))
fit_summary(fit = brms_models[[rownames(comp_mods)[1]]], gsub.pattern = "sensory_input", gsub.replacement = "", fill = "#e85307", trace.palette = terrain.colors)
brms_models <- readRDS("./data/processed/regresion_models_brms.RDS")
cols <- viridis(10)
agg_dat <- aggregate(time_to_enter ~ sensory_input, dat, mean)
agg_dat$n <- sapply(1:nrow(agg_dat), function(x) length(unique(dat$individual[dat$sensory_input == agg_dat$sensory_input[x]])))
agg_dat$n.labels <- paste("n =", agg_dat$n)
agg_dat$sensory_input <- factor(agg_dat$sensory_input)
# raincoud plot:
fill_color <- adjustcolor("#e85307", 0.6)
ggplot(dat, aes(y = time_to_enter, x = sensory_input)) +
# add half-violin from {ggdist} package
ggdist::stat_halfeye(
fill = fill_color,
alpha = 0.5,
# custom bandwidth
adjust = .5,
# adjust height
width = .6,
.width = 0,
# move geom to the cright
justification = -.2,
point_colour = NA
) +
geom_boxplot(fill = fill_color,
width = .15,
# remove outliers
outlier.shape = NA # `outlier.shape = NA` works as well
) +
# add justified jitter from the {gghalves} package
gghalves::geom_half_point(
color = fill_color,
# draw jitter on the left
side = "l",
# control range of jitter
range_scale = .4,
# add some transparency
alpha = .5,
transformation = ggplot2::position_jitter(height = 0)
) +
ylim(c(-30, 310)) +
geom_text(data = agg_dat, aes(y = rep(-25, 5), x = sensory_input, label = n.labels), nudge_x = -0.13, size = 6) +
scale_x_discrete(labels=c("Control" = "Noise control", "Sound vision" = "Sound & vision", "Vision" = "Vision", "Lessen input" = "Lessen input")) +
labs(x = "Sensory input       ", y = "Time to enter roost (s)") + theme(axis.text.x = element_text(angle = 15, hjust = 1))
# ggsave(filename = "./output/time_to_enter_by_treatment.tiff", dpi = 300, width = 3000, height = 1500, units = "px")
ggsave(filename = "./output/time_to_enter_by_treatment.tiff", dpi = 300, width = 3000, height = 1500, units = "px")
remove.packages("brmsish")
source("https://raw.githubusercontent.com/maRce10/sketchy/main/R/load_packages.R")
load_packages(c("readxl", "brms", "viridis", "ggplot2", "pbapply", "cowplot", "kableExtra", "warbleR", github = "maRce10/brmsish"))
brms_models <- readRDS("./data/processed/regresion_models_brms.RDS")
names(brms_models)
comp_mods <- loo_compare(brms_models[[1]], brms_models[[2]], model_names = names(brms_models))
df1 <- kbl(comp_mods, row.names = TRUE, escape = FALSE, format = "html", digits = 3)
cat("Compare models:")
kable_styling(df1, bootstrap_options = c("striped", "hover", "condensed", "responsive"), full_width = FALSE, font_size = 12)
cat("Best model:\n")
cat(paste("-  ", rownames(comp_mods)[1], "\n"))
